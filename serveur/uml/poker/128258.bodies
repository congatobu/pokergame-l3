class PokerClientThread
!!!128258.java!!!	PokerClientThread(inout socket : Socket)
		super("PokerClientThread");
		this.socket = socket;
!!!128386.java!!!	run() : void
		clientIP = socket.getInetAddress().getHostAddress();
				try{
				//new PrintWriter(socket.getOutputStream(), true);
			out =  new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			in = new BufferedReader (new InputStreamReader(socket.getInputStream()));
			String inputLine;
			
			
				
				
				 try {
				  // lance le traitement du message reçu
   while ((inputLine = in.readLine()) != null) {
   
			traitements(inputLine);

      }
  } catch (Exception e) {
  
  screenOut.println("ya un bug dans un thread reception message "+e);
  e.printStackTrace();
        }
 
				
			deco();
			
		
		}catch(IOException e){
		screenOut.println("ya un bug dans un thread (bug général)");
		e.printStackTrace();
			deco();
		}	
			
!!!128514.java!!!	traitements(in inputLine : String) : void
	 
						try{
						//perroquet test
		screenOut.println("Socket recue : "+inputLine);
		send(clientIP+" : "+inputLine);
   	
						//Reception nom des clients
			if(inputLine.length()>=8 && inputLine.substring(0,8).equals("<pseudo>")){
							this.pseudo = inputLine.substring(8);
							screenOut.println("Pseudo enregistre : "+inputLine);
								}
								
									//Reception messages des clients
			if(inputLine.length()>=9 && inputLine.substring(0,9).equals("<message>")){
							screenOut.println("Message recu : "+inputLine);
								}	
	
						}
						catch(Exception e){
						 screenOut.println("ya un bug traitements message");
						 e.printStackTrace();
						 }
!!!128642.java!!!	getClientIP() : String
 return this.clientIP;
!!!128770.java!!!	getPseudo() : String
 return this.pseudo;
!!!128898.java!!!	deco() : void
	try{
	in.close();
	out.close();
	socket.close();	
	if(partie!=null){partie.deleteClient(this);}
	PokerServer.deleteClient(this);
			}catch(IOException e){
		screenOut.println("ya un bug dans un thread deco"+e);
		e.printStackTrace();
		}	
			
!!!129026.java!!!	finalize() : void
	
	 try {
	 socket = null;
	 clientIP=null;
	 out = null;
	 in = null;
	 partie= null;
	 pseudo = null;
      screenOut.close();
       
    } catch(Exception e) {e.printStackTrace();}
    finally {
		  super.finalize();
    }
	 
!!!129154.java!!!	rejoindrePartie(in nomP : String) : void
	int existe = 0;
		PokerPartie foo = null;
		for (int i=0;i<PokerServer.partiesList.size();++i){
			foo = (PokerPartie)PokerServer.partiesList.get(i);
			if(foo.getNom().equals(nomP)){existe=1;break;}
		}
		
		if(existe==1){
		if(foo.addPlayer(this)==-1){existe = 0;}else{partie=foo;}
		}
		if(existe==0){send("probleme partie trop de joueurs ou partie inconnue");
			}
!!!129282.java!!!	send(in message : String) : void
		try{
		out.write(message+"\n");
		out.flush();
		 screenOut.println("Message envoye : "+message);
		 }
		 catch(Exception e){
		 screenOut.println("ya un bug envoi message");
		 e.printStackTrace();
		 }
		
