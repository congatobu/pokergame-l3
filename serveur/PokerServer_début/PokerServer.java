import java.net.*;import java.io.*;import java.util.*;import java.util.concurrent.Semaphore;/*Classe du serveur qui va recevoir les demandes de connection*/public class PokerServer {			static Vector clientList= new Vector();	static Vector partiesList = new Vector();	static PrintWriter screenOut = new PrintWriter(System.out, true);	static ServerSocket serverSocket = null;	static Semaphore available = new Semaphore(1, true);	static Semaphore availableP = new Semaphore(1, true);		public static void main(String[] args) throws IOException {			boolean listening = true;		CommandReader tempCommand;		Thread tempThread;		PokerClientThread tempClient;		int currentNode;		Integer tempPort;		screenOut.println("");screenOut.println("");		screenOut.println("POKER Server v0.1");		screenOut.println("------------------------------------------------------");		screenOut.println(" Notes:");		screenOut.println("Tapez 'HELP' pour voir les commandes");		screenOut.println("------------------------------------------------------");		screenOut.println("");		// on prend le port en argument ou 6667 par défault				if  (args.length >= 1){			 tempPort = new Integer(args[0]);										}					else								{								tempPort = 6667;								}						try{				serverSocket = new ServerSocket(tempPort.intValue());			}catch(IOException e){				System.err.println("Erreur de port "+tempPort);				System.exit(-1);			}																				screenOut.println("Le serveur ecoute le port "+tempPort+"\n");				screenOut.print(">");				screenOut.flush();				tempCommand = new CommandReader();				tempCommand.start();							while (listening){				try{													tempClient = new PokerClientThread(serverSocket.accept());					clientList.add(tempClient);					tempThread = new Thread(tempClient);					tempThread.start();						screenOut.println("Nouveau client");				}				catch (IOException e){e.printStackTrace();				}			}			serverSocket.close();			}				/*		Fonction pour lister les parties		*/	static void listParties(){		int i;		PokerPartie foo;		for (i=0;i<partiesList.size();++i){			foo = (PokerPartie)partiesList.get(i);			screenOut.println(" Partie "+(i+1)+": "+foo.getEtat());		} 		}		/*		Fonction pour lister les clients		*/	static void listClients(){		int i;		PokerClientThread foo;		for (i=0;i<clientList.size();++i){			foo = (PokerClientThread)clientList.get(i);			screenOut.println(" Client "+(i+1)+": "+foo.getClientIP());		} 		}			/*		Fonction pour enlever un client de la liste		*/	static void deleteClient(PokerClientThread deadClient){	try{		available.acquire();		int num;		num=clientList.indexOf(deadClient);		if(num!=-1){		clientList.remove(num);		screenOut.println("ya un client qui deco");					}	available.release();	}catch(Exception e){e.printStackTrace();}  }  		/*		Fonction pour enlever une partie de la liste		*/  static void deletePartie(PokerPartie deadPartie){	try{		availableP.acquire();		int num;		num=partiesList.indexOf(deadPartie);		if(num!=-1){		partiesList.remove(num);		screenOut.println("ya une partie qui est détruite");					}	availableP.release();	}catch(Exception e){e.printStackTrace();}  }    }/*Classe du lecteur de commandes*/class CommandReader extends Thread{	BufferedReader in = new BufferedReader(new InputStreamReader(System.in));	PrintWriter screenOut = new PrintWriter(System.out, true);	String command;		public CommandReader(){		super("CommandReader");	}	public void run(){		boolean valid;		try{			while ((command = in.readLine()) != null){				valid = false;				command = command.trim().toUpperCase();				if (command.compareTo("QUIT")==0){					valid = true;					PokerClientThread foo;					for (int i=0;i<PokerServer.clientList.size();++i){						foo= (PokerClientThread) PokerServer.clientList.get(i);						foo.deco();						}																	PokerServer.serverSocket.close();					System.exit(0);				}				if (command.compareTo("LIST")==0){					valid = true;					screenOut.println("");					PokerServer.listClients();					screenOut.println("");				}				if (command.compareTo("LISTP")==0){					valid = true;					screenOut.println("");					PokerServer.listParties();					screenOut.println("");				}				if (command.compareTo("HELP")==0){					valid = true;					screenOut.println("\n LIST  - liste des clients connectes");					screenOut.println(" LISTP - liste des parties");					screenOut.println(" HELP  - liste des commandes");					screenOut.println(" QUIT  - deconnecte les clients et quitte le serveur \n");				}				if (!valid){					screenOut.println("\nError: tapez 'HELP' pour voir les commandes supportees\n");				}				screenOut.print(">");				screenOut.flush();			}		}		catch (IOException e){			e.printStackTrace();		}			}};